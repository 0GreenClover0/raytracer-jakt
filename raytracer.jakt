import AK::math
import AK::math_constants
import AK::vec3
import camera
import hittable
import hittable_list
import sphere

class Raytracer {
    public fn run() {
        // World
        mut world = HittableList::create()

        // let material_left = Lambertian::create(albedo: &Vec3::create(0.0f32, 0.0f32, 1.0f32))
        // let material_right = Lambertian::create(albedo: &Vec3::create(1.0f32, 0.0f32, 0.0f32))

        // let R = math::cos(math_constants::pi() / 4.0f32)
        // world.add(hittable: Sphere::create(center: Vec3::create(-R, 0.0f32, -1.0f32), radius: R, material: &material_left))
        // world.add(hittable: Sphere::create(center: Vec3::create(R, 0.0f32, -1.0f32), radius: R, material: &material_right))

        let material_ground = Lambertian::create(albedo: &Vec3::create(0.8f32, 0.8f32, 0.0f32))
        let material_center = Lambertian::create(albedo: &Vec3::create(0.1f32, 0.2f32, 0.5f32))
        let material_left = Dielectric::create(refraction_index: 1.5f32)
        let material_bubble = Dielectric::create(refraction_index: 1.0f32 / 1.5f32)
        let material_right = Metal::create(albedo: &Vec3::create(0.8f32, 0.6f32, 0.2f32), fuzz: 1.0f32)

        world.add(hittable: Sphere::create(center: Vec3::create(0.0f32, -100.5f32, -1.0f32), radius: 100f32, material: &material_ground))
        world.add(hittable: Sphere::create(center: Vec3::create(0.0f32, 0.0f32, -1.2f32), radius: 0.5f32, material: &material_center))
        world.add(hittable: Sphere::create(center: Vec3::create(-1.0f32, 0.0f32, -1.0f32), radius: 0.5f32, material: &material_left))
        world.add(hittable: Sphere::create(center: Vec3::create(-1.0f32, 0.0f32, -1.0f32), radius: 0.4f32, material: &material_bubble))
        world.add(hittable: Sphere::create(center: Vec3::create(1.0f32, 0.0f32, -1.0f32), radius: 0.5f32, material: &material_right))

        mut camera = Camera::create(aspect_ratio: 16.0f32 / 9.0f32, image_width: 400, samples_per_pixel: 100, max_depth: 50)
        camera.vertical_fov = 20.0f32
        camera.look_from = Vec3::create(-2.0f32, 2.0f32, 1.0f32)
        camera.look_at = Vec3::create(0.0f32, 0.0f32, -1.0f32)
        camera.v_up = Vec3::create(0.0f32, 1.0f32, 0.0f32)
        camera.render(&world)
    }
}
