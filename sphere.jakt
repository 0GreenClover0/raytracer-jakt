import AK::interval
import AK::math { AK }
import AK::vec3
import hittable
import ray

class Sphere : Hittable {
    public fn create(center: Vec3, radius: f32, material: &Material) -> Sphere {
        return Sphere(m_center: center, m_radius: radius, m_material: *material)
    }

    public override fn hit(this, ray: &Ray, ray_t: Interval, hit_record: &mut HitRecord) -> bool {
        let origin_center = .m_center - ray.origin()
        let a = Vec3::length_squared(ray.direction())
        let h = Vec3::dot(ray.direction(), origin_center)
        let c = Vec3::length_squared(origin_center) - .m_radius * .m_radius

        let discriminant = h * h - a * c
        if discriminant < 0.0f32 {
            return false
        }

        let sqrtd = sqrt(discriminant)

        // Find the nearest root that lies in the acceptable range.
        mut root = (h - sqrtd) / a
        if not ray_t.surrounds(root) {
            root = (h + sqrtd) / a
            if not ray_t.surrounds(root) {
                return false
            }
        }

        hit_record.t = root
        hit_record.point = ray.at(time: hit_record.t)
        let outward_normal = (hit_record.point - .m_center) / .m_radius
        hit_record.set_face_normal(ray, &outward_normal)
        hit_record.material = .m_material
        return true
    }

    m_center: Vec3
    m_radius: f32
    m_material: Material
}
