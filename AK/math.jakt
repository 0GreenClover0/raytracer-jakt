import math_constants

import extern "AK/Math.h" {
    namespace AK {
        extern fn sqrt<T>(anon value: T) -> T
    }
}

fn radians(degrees: f32) -> f32 {
    return degrees * pi() / 180.0f32
}

import extern "AK/Random.h" {
    namespace AK {
        extern fn get_random<T>() -> T
    }
}

fn random_float() -> f32 {
    let a = AK::get_random<u32>()
    let b: u32 = math_constants::AK::NumericLimits::max()
    return (a as! f32 / (b as! f32 + 1.0f32))
}

fn random_float(min: f32, max: f32) -> f32 {
    return min + (max - min) * random_float()
}

fn clamp(value: f32, min: f32, max: f32) -> f32 {
    if value < min {
        return min
    }

    if value > max {
        return max
    }

    return value
}
