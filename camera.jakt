
import AK::color
import AK::interval
import AK::math { AK }
import AK::math_constants
import AK::vec3
import hittable
import hittable_list
import ray

class Camera {
    public aspect_ratio: f32 = 1.0f32
    public image_width: i64 = 100

    private m_image_height: i64
    private m_center: Vec3
    private m_pixel00_location: Vec3
    private m_pixel_delta_u: Vec3 // Offset to pixel to the right
    private m_pixel_delta_v: Vec3 // Offset to pixel below

    public fn create(aspect_ratio: f32, image_width: i64) -> Camera {
        return Camera(
            aspect_ratio,
            image_width,
            m_image_height: 0,
            m_center: Vec3::create(),
            m_pixel00_location: Vec3::create()
            m_pixel_delta_u: Vec3::create()
            m_pixel_delta_v: Vec3::create()
        )
    }

    public fn render(mut this, world: &Hittable) {
        .initialize()

        print("P3\n{} {}\n255\n", .image_width, .m_image_height)

        for k in 0...m_image_height {
            for i in 0...image_width {
                let pixel_center = .m_pixel00_location + (i as! f32 * .m_pixel_delta_u) + (k as! f32 * .m_pixel_delta_v)
                let ray_direction = pixel_center - .m_center
                let ray = Ray::create(origin: &.m_center, direction: &ray_direction)

                let pixel_color = ray_color(&ray, &world)
                write_color(&pixel_color)
            }
        }
    }

    private fn initialize(mut this) {
        // Calculate the image height, and ensure that it's at least 1.
        .m_image_height = (image_width as! f32 / aspect_ratio) as! i64
        if .m_image_height < 1 {
            .m_image_height = 1
        }

        // Camera
        .m_center = Vec3::create()

        let focal_length = 1.0f32
        let viewport_height = 2.0f32
        let viewport_width = viewport_height * (.image_width as! f32) / (.m_image_height as! f32)

        // Calculate the vectors across the horizontal and down the vertical viewport edges.
        let viewport_u = Vec3::create(viewport_width, 0.0f32, 0.0f32)
        let viewport_v = Vec3::create(0.0f32, -viewport_height, 0.0f32)

        // Calculate the horizontal and vertical delta vectors from pixel to pixel.
        .m_pixel_delta_u = viewport_u / (.image_width as! f32)
        .m_pixel_delta_v = viewport_v / (.m_image_height as! f32)

        // Calculate the location of the upper left pixel.
        let viewport_upper_left = .m_center - Vec3::create(0.0f32, 0.0f32, focal_length) - viewport_u / 2.0f32 - viewport_v / 2.0f32
        .m_pixel00_location = viewport_upper_left + 0.5f32 * (.m_pixel_delta_u + .m_pixel_delta_v)
    }

    private fn ray_color(ray: &Ray, world: &Hittable) -> Vec3 {
        mut hit_record = HitRecord::create()
        if world.hit(ray, ray_t: Interval::create(min: 0.0f32, max: math_constants::AK::NumericLimits::max()), &mut hit_record) {
            return 0.5f32 * (hit_record.normal + Vec3::create(1.0f32, 1.0f32, 1.0f32)) 
        }

        let unit_direction = Vec3::normalize(ray.direction())
        let a = 0.5f32 * (unit_direction.y + 1.0f32)
        return (1.0f32 - a) * Vec3::create(1.0f32, 1.0f32, 1.0f32) + a * Vec3::create(0.5f32, 0.7f32, 1.0f32)
    }
}
