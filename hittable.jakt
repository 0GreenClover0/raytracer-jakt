import AK::interval
import AK::math
import AK::vec3
import ray

struct HitRecord {
    point: Vec3
    normal: Vec3
    material: Material? = None
    t: f32
    front_face: bool

    fn create() -> HitRecord {
        return HitRecord(point: Vec3::create(0.0f32, 0.0f32, 0.0f32), normal: Vec3::create(0.0f32, 0.0f32, 0.0f32), t: 0.0f32, front_face: false)
    }

    fn set_face_normal(mut this, ray: &Ray, outward_normal: &Vec3) {
        // Sets the hit record normal vector.
        // NOTE: the parameter `outward_normal` is assumed to have unit length.
        .front_face = Vec3::dot(ray.direction(), *outward_normal) < 0.0f32
        .normal = match .front_face {
            true => *outward_normal
            false => Vec3::negate(*outward_normal)
        }
    }
}

class Hittable {
    // FIXME: This method should be pure virtual
    public virtual fn hit(this, ray: &Ray, ray_t: Interval, hit_record: &mut HitRecord) -> bool {
        return false
    }
}

class Material {
    public virtual fn scatter(this, ray_in: &Ray, hit_record: &HitRecord, attenuation: &mut Vec3, scattered: &mut Ray) -> bool {
        return false
    }
}

class Lambertian : Material {
    private m_albedo: Vec3

    public fn create(albedo: &Vec3) -> Lambertian {
        return Lambertian(m_albedo: *albedo)
    }

    public override fn scatter(this, ray_in: &Ray, hit_record: &HitRecord, attenuation: &mut Vec3, scattered: &mut Ray) -> bool {
        mut scatter_direction = hit_record.normal + Vec3::random_unit_vector()

        // Catch degenerate scatter direction
        if Vec3::near_zero(scatter_direction) {
            scatter_direction = hit_record.normal
        }

        scattered = Ray::create(origin: &hit_record.point, direction: &scatter_direction)
        attenuation = .m_albedo
        return true
    }
}

class Metal : Material {
    private m_albedo: Vec3
    private m_fuzz: f32

    public fn create(albedo: &Vec3, fuzz: f32) -> Metal {
        let clamped = match fuzz < 1.0f32 {
            true => fuzz
            false => 1.0f32
        }
        return Metal(m_albedo: *albedo, m_fuzz: clamped)
    }

    public override fn scatter(this, ray_in: &Ray, hit_record: &HitRecord, attenuation: &mut Vec3, scattered: &mut Ray) -> bool {
        mut reflected = Vec3::reflect_v(&ray_in.direction(), &hit_record.normal)
        reflected = Vec3::normalize(reflected) + (.m_fuzz * Vec3::random_unit_vector())
        scattered = Ray::create(origin: &hit_record.point, direction: &reflected)
        attenuation = .m_albedo
        return (Vec3::dot(scattered.direction(), hit_record.normal) > 0.0f32)
    }
}

class Dielectric : Material {
    private m_refraction_index: f32

    public fn create(refraction_index: f32) -> Dielectric {
        return Dielectric(m_refraction_index: refraction_index)
    }

    public override fn scatter(this, ray_in: &Ray, hit_record: &HitRecord, attenuation: &mut Vec3, scattered: &mut Ray) -> bool {
        attenuation = Vec3::create(1.0f32, 1.0f32, 1.0f32)
        let ri = match hit_record.front_face {
            true => (1.0f32 / .m_refraction_index)
            false => .m_refraction_index
        }

        let unit_direction = Vec3::normalize(ray_in.direction())
        let cos_theta = math::min(&Vec3::dot(Vec3::negate(unit_direction), hit_record.normal), &1.0f32)
        let sin_theta = math::AK::sqrt(1.0f32 - cos_theta * cos_theta)

        let cannot_refract = ri * sin_theta > 1.0f32
        mut direction = Vec3::create()

        if cannot_refract or reflectance(cosine: cos_theta, refraction_index: ri) > math::random_float() {
            direction = Vec3::reflect_v(&unit_direction, &hit_record.normal)
        } else {
            direction = Vec3::refract(&unit_direction, &hit_record.normal, etai_over_etat: ri)
        }

        scattered = Ray::create(origin: &hit_record.point, &direction)
        return true
    }

    private fn reflectance(cosine: f32, refraction_index: f32) -> f32 {
        // Use Schlick's approximation for reflectance.
        mut r0 = (1.0f32 - refraction_index) / (1.0f32 + refraction_index)
        r0 = r0 * r0
        return r0 + (1.0f32 - r0) * math::pow((1.0f32 - cosine), 5.0f32)
    }
}
